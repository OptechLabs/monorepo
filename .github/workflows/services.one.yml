# This github workflow uses Github Actions to run tests and interface with Google Cloud Platform to deploy a containerized application to Cloud Run. 
# The workflow is triggered by a push to the main branch of the repository, and it runs tests and deploys the code in the services/one directory. 
# If the tests pass, it performs the following operations:
# - Authenticates with Google Cloud Platform using the Google Auth action.
# - Uploads files to Cloud Storage using the Upload Cloud Storage action.
# - Authenticates with Docker using the Docker Login action.
# - Builds and pushes a container image to Google Artifact Registry using Docker.
# - Deploys the application to Cloud Run using the Deploy Cloud Run action.
# The workflow uses environment variables to store the Google Cloud Environment values and Github secrets to store protected login or GCP IAM credentials.

name: services.one.TestAndDeploy
run-name: ${{github.actor}} started services.one.TestAndDeploy.

on:
    workflow_dispatch:
    push:
        paths:
            - 'services/one/**'
        branches:
            - '*'

env:
    PROJECT_ID: gcp-fake-project-id-1234 # Replace with your GCP project ID
    GAR_LOCATION: us-east4
    REGION: us-east4
    REPOSITORY: monorepo-one
    PROD_SERVICE: monorepo-one-prod
    STAGING_SERVICE: monorepo-one-staging

jobs:
    test:
        name: test services.one
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:15.6-alpine
        
                env:
                    POSTGRES_PASSWORD: ${{ secrets.TEST_PSQL_PASS }}
                    POSTGRES_USER: ${{ secrets.TEST_PSQL_USER }}
                    POSTGRES_DB: monorepo_one_test
        
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
        steps:
            -   uses: actions/checkout@v4

            -   name: Go Mod Cache
                uses: actions/cache@v4
                with:
                    path: "~/go/pkg/mod"
                    key: ${{ runner.os }}-go-mod-one-${{ hashFiles('**/go.sum') }}

            -   name: Test Services one
                run: make testone
                env:
                    TEST_DB_CONN_STR: "postgres://${{ secrets.TEST_SQL_USER }}:${{ secrets.TEST_SQL_PASS }}@localhost:5432/monorepo_one_test?sslmode=disable"


    # While only the production deployment is shown here, the staging deployment is pretty much the same, but with staging directories and the staging branch.
    deploy_prod:
            needs:  test
            permissions:
                contents: 'read'
                id-token: 'write'
            runs-on: ubuntu-latest
            name:   Deploy Production 

            # Only run this job if the push is to the main branch
            if: ${{ github.ref == 'refs/heads/main' }} 

            steps:
                -   name: Checkout
                    uses: actions/checkout@v4

                # Uses Google IAM setup users to authenticate with Google Cloud Platform
                -   name:   Google Auth
                    id:     auth
                    uses:   'google-github-actions/auth@v2'
                    with:
                        project_id:                 '${{ env.PROJECT_ID }}'
                        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
                        service_account:            '${{ secrets.WIF_SERVICE_ACCOUNT }}'
                        token_format:                access_token

                # As a matter of best practice, upload the DB migrations to Cloud Storage instead of packaging them up with the actual container.
                # This decouples of the migration script and compiled application concerns.
                -   name: Upload DB Migrations
                    id: upload-migrations
                    uses: 'google-github-actions/upload-cloud-storage@v2'
                    with:
                        path: 'services/one/migrations/'
                        destination: '${{ secrets.MIGRATIONS_ONE_PRODUCTION_BUCKET }}'
                        glob: '**/*.sql'
                        parent: false
    
                # Outputs the result. I like to see it in the Github Actions log.
                -   name: Upload Migrations Registry Result
                    run: echo '${{ steps.upload-migrations.outputs.uploaded }}'

                # Use the previous Google Auth step to authenticate for Docker.
                -   name:   Docker Auth
                    id:     docker-auth
                    uses:   'docker/login-action@v3'
                    with:
                        username: oauth2accesstoken
                        password: ${{ steps.auth.outputs.access_token }}
                        registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev

                # Build and push the container to Google Artifact Registry
                -   name:   Build and Push Container
                    run:    |-
                            docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/monorepo-one:${{ github.sha }}" -f "dockerfiles/remote/one.Dockerfile" ./
                            docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/monorepo-one:${{ github.sha }}"
                
                # Push the container to the defined Cloud Run service.
                -   name:   Deploy to Cloud Run
                    id:     deploy
                    uses:   google-github-actions/deploy-cloudrun@v2
                    with:
                        service:    ${{ env.SERVICE }}
                        region:     ${{ env.REGION }}
                        image:      ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/monorepo-one:${{ github.sha }}
                
                -   name:   Show Output
                    run:    echo ${{ steps.deploy.outputs.url }}
